import UIKit
import Foundation
import IQKeyboardManagerSwift
import UserNotifications

var deviceTokenID = ""
var deviceInfo = ""

@UIApplicationMain
class AppDelegate: UIResponder, UIApplicationDelegate {
    
    var window: UIWindow?
 
    
    func application(_ application: UIApplication, didFinishLaunchingWithOptions launchOptions: [UIApplicationLaunchOptionsKey: Any]?) -> Bool {
        // Override point for customization after application launch.
        
        
        if let notification = launchOptions?[UIApplicationLaunchOptionsKey.remoteNotification] as? [String: AnyObject] {
            
            
            
            let aps = notification["aps"] as! [String: AnyObject]
            let alert = aps["alert"] as? [String:AnyObject]
            let title = alert?["title"] as? String
            //let body = alert?["body"] as? String
            
    
            
//            DispatchQueue.global(qos: .background).async {
//                //print("This is run on the background queue")
//                
//                DispatchQueue.main.async {
//                    
//                    let notifiAlert = UIAlertView()
//                    //var NotificationMessage : AnyObject? =  notification["aps"] as AnyObject
//                    notifiAlert.title = "Vaka - " + title!
//                    
//                    //notifiAlert.message = NotificationMessage as? String
//                    notifiAlert.message = "GG"
//                    notifiAlert.addButton(withTitle: "Tamam")
//                    notifiAlert.show()
//                }
//            }
            
        }
        
        
        application.applicationIconBadgeNumber = 0; // Clear badge when app launches
        
        UNUserNotificationCenter.current().requestAuthorization(options: [.alert,.sound,.badge])
        {(granted,error) in
            if granted{
                application.registerForRemoteNotifications()
            } else {
                print("User Notification permission denied: \(error?.localizedDescription)")
            }
            
        }
        
        
        let systemVersion = UIDevice.current.systemVersion
        print("iOS\(systemVersion)")
        
        //iPhone or iPad
        let model = UIDevice.current.model
        print("device type=\(model)")
        deviceInfo = model
        
        //Keyboard Setting
        //IQKeyboardManager.sharedManager().enableAutoToolbar = true
        IQKeyboardManager.sharedManager().enable = true
        IQKeyboardManager.sharedManager().toolbarDoneBarButtonItemText = "Tamam"
        
        
        //UIApplication.shared.cancelAllLocalNotifications()
        UNUserNotificationCenter.current().requestAuthorization(options: [.alert, .sound, .badge
            ], completionHandler: { granted, error in
                //handle error if there is one
        })
        
        let optionOne = UNNotificationAction(identifier: "optionOne", title: "Görüntüle", options: [.foreground])
        let optionTwo = UNNotificationAction(identifier: "optionTwo", title: "Düzenle", options:[.foreground])
        let clue = UNNotificationAction(identifier: "clue", title: "Durumu görüntüle", options:[.foreground])
        
        let caseCategory = UNNotificationCategory(identifier: "caseCategory", actions: [optionOne,
                                                                                        optionTwo, clue], intentIdentifiers: [], options: [])
        UNUserNotificationCenter.current().setNotificationCategories([caseCategory])
        
        
        //let rootViewController = self.window!.rootViewController
        let mainStoryboard: UIStoryboard = UIStoryboard(name: "Main", bundle: nil)
        
        
        let isUserLoggedIn = UserDefaults.standard.bool(forKey: "isUserLoggedIn")
        
        if(!isUserLoggedIn)
        {
            
            let storyboard: UIStoryboard = UIStoryboard(name: "Main", bundle: nil)
            let primaryViewController = storyboard.instantiateViewController(withIdentifier :"primaryView") as! PrimaryViewController
            
            window!.rootViewController = primaryViewController
            window!.makeKeyAndVisible()
            
        }else{
            
            let profilPage = mainStoryboard.instantiateViewController(withIdentifier :"Profil") as! ViewController
            
            window!.rootViewController = profilPage
            window!.makeKeyAndVisible()
            
        }
     
        
        
     
        
        return true
    }
    
    
    func application(_ application: UIApplication, didReceiveRemoteNotification userInfo: [AnyHashable : Any]) {
        
        // payload'a eklediğiniz her key "aps" altında yer alıyor dolayısıyla bunun içine bakmamız lazım
        if let apsPayloadContent:AnyObject = userInfo["aps"] as AnyObject {
            
            //aps payload'ımızın içerisinde "pid" key'iyle girdiğimiz custom bir içeriğimiz olduğunu farz edelim.
            if let customData:String = apsPayloadContent["pid"] as? String {
                
                // aldığımız custom içeriğimizi daha sonra bir local notification'la post edelim.
                // ve elbette bir yerlere post edilen bu notification'ı karşılayabilecek bir observer ekleyeceksiniz'ki uygulama notification aldığında yapmak istediğiniz aksiyon tetiklenebilsin.
                NotificationCenter.default.post(name: NSNotification.Name(rawValue: "remoteNotificationReceived"), object: customData)
            }
        }
        
    }
    
    
    func application(_ application: UIApplication, didReceiveRemoteNotification userInfo: [AnyHashable : Any], fetchCompletionHandler completionHandler: @escaping (UIBackgroundFetchResult) -> Void) {
        
        // payload'a eklediğiniz her key "aps" altında yer alıyor dolayısıyla bunun içine bakmamız lazım
        if let apsPayloadContent:AnyObject = userInfo["aps"] as AnyObject {
            
            //aps payload'ımızın içerisinde "pid" key'iyle girdiğimiz custom bir içeriğimiz olduğunu farz edelim.
            if let customData:String = apsPayloadContent["pid"] as? String {
                
                // aldığımız custom içeriğimizi daha sonra bir local notification'la post edelim.
                // ve elbette bir yerlere post edilen bu notification'ı karşılayabilecek bir observer ekleyeceksiniz'ki uygulama notification aldığında yapmak istediğiniz aksiyon tetiklenebilsin.
               NotificationCenter.default.post(name: NSNotification.Name(rawValue: "remoteNotificationReceived"), object: customData)
            }
        }
        
//        let aps = userInfo["aps"] as? [String:AnyObject]
//        let alert = aps?["alert"] as? [String:AnyObject]
//        
//        let title = alert?["title"] as? String
//        let body = alert?["body"] as? String
//
//        
//        DispatchQueue.global(qos: .background).async {
//            //print("This is run on the background queue")
//            
//            DispatchQueue.main.async {
//                var notifiAlert = UIAlertView()
//                var NotificationMessage : AnyObject? =  userInfo["aps"] as AnyObject
//                notifiAlert.title = "** Kontrol Ediniz"
//                notifiAlert.message = NotificationMessage as? String
//                notifiAlert.addButton(withTitle: "Tamam")
//                notifiAlert.show()
//            }
//        }
        
        
        
        
//        let itemName = NotificationMessage?["aps"] as! String
//        print("Custom: \(itemName)")
    }
    

    
    //code to make a token string
    func tokenString(_ deviceToken:Data) -> String{
        let bytes = [UInt8](deviceToken)
        var token = ""
        for byte in bytes{
            token += String(format: "%02x",byte)
        }
        return token
    }
    // Successful registration and you have a token. Send the token to your provider, in this case the console for cut and paste.
    func application(_ application: UIApplication, didRegisterForRemoteNotificationsWithDeviceToken deviceToken: Data) {
        
        print("Successful registration. Token is:")
        print(tokenString(deviceToken))
        deviceTokenID = tokenString(deviceToken)
    }
    // Failed registration. Explain why.
    func application(_ application: UIApplication, didFailToRegisterForRemoteNotificationsWithError error: Error) {
        print("Failed to register for remote notifications: \(error.localizedDescription)")
    }

    
    func applicationWillResignActive(_ application: UIApplication) {
        // Sent when the application is about to move from active to inactive state. This can occur for certain types of temporary interruptions (such as an incoming phone call or SMS message) or when the user quits the application and it begins the transition to the background state.
        // Use this method to pause ongoing tasks, disable timers, and invalidate graphics rendering callbacks. Games should use this method to pause the game.
        
        //bura okudu genişletme
    }
    
    func applicationDidEnterBackground(_ application: UIApplication) {
        // Use this method to release shared resources, save user data, invalidate timers, and store enough application state information to restore your application to its current state in case it is terminated later.
        // If your application supports background execution, this method is called instead of applicationWillTerminate: when the user quits.
    }
    
    func applicationWillEnterForeground(_ application: UIApplication) {
        // Called as part of the transition from the background to the active state; here you can undo many of the changes made on entering the background.
    }
    
    func applicationDidBecomeActive(_ application: UIApplication) {
        // Restart any tasks that were paused (or not yet started) while the application was inactive. If the application was previously in the background, optionally refresh the user interface.
        
        
        ownCasesListJsonFirst = 0
//        let goBoard = UIStoryboard(name: "Main", bundle: nil).instantiateViewController(withIdentifier: "Profil") as! ViewController
//        present(goBoard, animated: true, completion: nil)
        let mainStoryboard: UIStoryboard = UIStoryboard(name: "Main", bundle: nil)
        let profilPage = mainStoryboard.instantiateViewController(withIdentifier :"Profil") as! ViewController
        
        window!.rootViewController = profilPage
        window!.makeKeyAndVisible()
        
        //bura tıkladı
    }
    
    func applicationWillTerminate(_ application: UIApplication) {
        // Called when the application is about to terminate. Save data if appropriate. See also applicationDidEnterBackground:.
        // Saves changes in the application's managed object context before the application terminates.
        saveContext()
    }
    
    // MARK: - Core Data stack
    
    var persistentContainer: NSPersistentContainer = {
        /*
         The persistent container for the application. This implementation
         creates and returns a container, having loaded the store for the
         application to it. This property is optional since there are legitimate
         error conditions that could cause the creation of the store to fail.
         */
        let container = NSPersistentContainer(name: "HippocrApp")
        container.loadPersistentStores(completionHandler: { (storeDescription, error) in
            if let error = error as NSError? {
                // Replace this implementation with code to handle the error appropriately.
                // fatalError() causes the application to generate a crash log and terminate. You should not use this function in a shipping application, although it may be useful during development.
                
                /*
                 Typical reasons for an error here include:
                 * The parent directory does not exist, cannot be created, or disallows writing.
                 * The persistent store is not accessible, due to permissions or data protection when the device is locked.
                 * The device is out of space.
                 * The store could not be migrated to the current model version.
                 Check the error message to determine what the actual problem was.
                 */
                fatalError("Unresolved error \(error), \(error.userInfo)")
            }
        })
        return container
    }()
    
    // MARK: - Core Data Saving support
    
    func saveContext () {
        let context = persistentContainer.viewContext
        if context.hasChanges {
            do {
                try context.save()
            } catch {
                // Replace this implementation with code to handle the error appropriately.
                // fatalError() causes the application to generate a crash log and terminate. You should not use this function in a shipping application, although it may be useful during development.
                let nserror = error as NSError
                fatalError("Unresolved error \(nserror), \(nserror.userInfo)")
            }
        }
    }
    
}
